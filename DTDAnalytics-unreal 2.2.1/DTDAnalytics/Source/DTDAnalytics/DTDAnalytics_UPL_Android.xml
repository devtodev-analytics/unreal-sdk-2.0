<?xml version="1.0" encoding="utf-8"?>

<!-- plugin additions -->
<root xmlns:android="http://schemas.android.com/apk/res/android">
    
    <!-- initialization log -->
    <init>
        <log text="DTDAnalytics init"/>
    </init>

    <!-- optional updates applied to AndroidManifest.xml -->
    <androidManifestUpdates>
        <log text="DTDAnalytics androidManifestUpdates"/>
        <addPermission android:name="android.permission.INTERNET"/>
        <addPermission android:name="android.permission.ACCESS_WIFI_STATE"/>
        <addPermission android:name="android.permission.READ_PHONE_STATE"/>
        
		<removePermission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
		<addPermission android:name="android.permission.WRITE_EXTERNAL_STORAGE"
			android:maxSdkVersion="18" />	

        <addAttribute tag="activity" name="android:exported" value="true"/>
    </androidManifestUpdates>

    <!-- optional additions to proguard -->
    <!-- TODO: Add the DevToDevRemoteConfigListener to keep -->
    <proguardAdditions>
        <log text="DTDAnalytics proguardAdditions"/>
        <insert>
            -keep class com.devtodev.** { *; }
            -dontwarn com.devtodev.**
            -keepclassmembers class com.devtodev.** { *; }
            -keep class com.epicgames.ue4.GameActivity$DevToDev* { *; }
            -dontwarn com.epicgames.ue4.GameActivity$DevToDev*
            -keep class com.google.** { *; }
        </insert>
    </proguardAdditions>
    
    <!-- Copy the generated resource file to be packaged -->
    <resourceCopies>
        <!-- copy d2d aar  -->
        <copyFile 
            src="$S(ProjectDir)/Plugins/DTDAnalytics/ThirdParty/Android/com/devtodev/android-analytics/2.4.0/android-analytics-2.4.0.aar" 
            dst="$S(BuildDir)/gradle/AFSProject/app/libs/android-analytics-2.4.0.aar" />
   	    <copyFile 
            src="$S(ProjectDir)/Plugins/DTDAnalytics/ThirdParty/Android/com/devtodev/android-analytics/2.4.0/android-analytics-2.4.0.aar" 
            dst="$S(BuildDir)/gradle/app/libs/android-analytics-2.4.0.aar" />
    </resourceCopies>

    <!-- Add gradle properties -->
    <gradleProperties>
        <insert>
            android.useAndroidX=true
            android.enableJetifier=true
        </insert>
    </gradleProperties>
    
    <!-- app grandle -->
    <buildGradleAdditions>
        <insert>
            allprojects {
                repositories {
                google()
                mavenCentral()
                    maven {
                        url 'https://maven.google.com'
                    }
                }
                def classMap = [
                            'android.support.annotation': 'androidx.annotation',
							'android.support.v4.app.ActivityCompat': 'androidx.core.app.ActivityCompat',
							'android.support.v4.app.NotificationCompat': 'androidx.core.app.NotificationCompat',
							'android.support.v4.app.NotificationManagerCompat': 'androidx.core.app.NotificationManagerCompat',
							'android.support.v4.content.ContextCompat': 'androidx.core.content.ContextCompat',
							'android.support.v4.content.FileProvider': 'androidx.core.content.FileProvider',
							'android.support.v13.app.FragmentCompat': 'androidx.legacy.app.FragmentCompat',
							'android.arch.lifecycle': 'androidx.lifecycle',
							'android.arch.lifecycle.Lifecycle': 'androidx.lifecycle.Lifecycle',
							'android.arch.lifecycle.LifecycleObserver': 'androidx.lifecycle.LifecycleObserver',
							'android.arch.lifecycle.OnLifecycleEvent': 'androidx.lifecycle.OnLifecycleEvent',
							'android.arch.lifecycle.ProcessLifecycleOwner': 'androidx.lifecycle.ProcessLifecycleOwner',
						]

						afterEvaluate { project ->
							project.rootProject.projectDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.java$/) { f ->
								classMap.each { entry ->
									if (f.getText('UTF-8').contains(entry.key)) {
										println "Change ${entry.key} to ${entry.value} in file ${f}"
										ant.replace(file: f, token: entry.key, value: entry.value)
									}
								}
							}
				}
            }

            dependencies {
                implementation fileTree(dir: "libs", include: ["*.aar"])
                implementation 'androidx.appcompat:appcompat:1.3.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
                implementation 'androidx.core:core-ktx:1.6.0'
                implementation 'com.google.code.gson:gson:2.8.6'
                implementation 'com.android.installreferrer:installreferrer:2.2'
            }
        </insert>
    </buildGradleAdditions>

    <!-- Additions to the GameActivity imports in GameActivity.java -->
    <gameActivityImportAdditions>
        <insert>
import com.devtodev.analytics.unrealwrapper.*;
		</insert>
    </gameActivityImportAdditions>

    <!-- Additions to the GameActivity class in GameActivity.java -->
    <gameActivityClassAdditions>
        <insert>
// Begin DevToDev gameActivityClassAdditions
public class DevToDevRemoteConfigListener implements DTDRemoteConfigListenerUnreal {
    public native void OnReceived(int result);
    public native void OnPrepareToChange();
    public native void OnChanged(int result, String error);

    public DevToDevRemoteConfigListener() {

    }
    
    @Override
    public void onReceived(int result) {
        OnReceived(result);
    }

    @Override
    public void onPrepareToChange() {
        OnPrepareToChange();
    }

    @Override
    public void onChanged(int result, String error) {
        OnChanged(result, error);
    }
}

public class DevToDevOnMessageCallback implements IGetterIntAndString {
    public native void callback(int logLevel, String message);
    
    public DevToDevOnMessageCallback() {

    }
    
    @Override
    public void onResult(int logLevel, String message) {
        callback(logLevel, message);
    }
}

public class DevToDevGetterVoidCallback implements IGetterVoid {
    private final Object pointer;

    public native void CallbackHandler(Object pointer);

    public DevToDevGetterVoidCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult() {
        CallbackHandler(pointer);
    }
}

public class DevToDevGetterStringCallback implements IGetterString {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, String result);

    public DevToDevGetterStringCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(String result) {
        CallbackHandler(pointer, result);
    }
}

public class DevToDevGetterBoolCallback implements IGetterBool {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, boolean result);

    public DevToDevGetterBoolCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(Boolean result) {
        CallbackHandler(pointer, result == null ? false : result.booleanValue());
    }
}

public class DevToDevGetterIntCallback implements IGetterInt {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, int result);

    public DevToDevGetterIntCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(int result) {
        CallbackHandler(pointer, result);
    }
}

public class DevToDevGetterLongCallback implements IGetterLong {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, long result);

    public DevToDevGetterLongCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(Long result) {
        CallbackHandler(pointer, result == null ? 0 : result.longValue());
    }
}

public class DevToDevPersistGetterStringCallback implements IGetterString {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, String result);

    public DevToDevPersistGetterStringCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(String result) {
        CallbackHandler(pointer, result);
    }
}

public class DevToDevPersistGetterLongCallback implements IGetterLong {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, long result);

    public DevToDevPersistGetterLongCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(Long result) {
        CallbackHandler(pointer, result == null ? 0 : result.longValue());
    }
}

public class DevToDevGetterOptionalLongCallback implements IGetterObject {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, boolean success, long result);

    public DevToDevGetterOptionalLongCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(Object result) {
        if (result instanceof Long) {
            CallbackHandler(pointer, true, (Long)result);
        } else {
            CallbackHandler(pointer, false, 0);
        }
    }
}

public class DevToDevGetterOptionalFloatCallback implements IGetterObject {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, boolean success, float result);

    public DevToDevGetterOptionalFloatCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(Object result) {
        if (result instanceof Double) {
            CallbackHandler(pointer, true, ((Double)result).floatValue());
        } else {
            CallbackHandler(pointer, false, 0);
        }
    }
}

public class DevToDevGetterOptionalBoolCallback implements IGetterObject {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, boolean success, boolean result);

    public DevToDevGetterOptionalBoolCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(Object result) {
        if (result instanceof Boolean) {
            CallbackHandler(pointer, true, (Boolean)result);
        } else {
            CallbackHandler(pointer, false, false);
        }
    }
}

public class DevToDevGetterOptionalStringCallback implements IGetterObject {

    private final Object pointer;

    public native void CallbackHandler(Object pointer, boolean success, String result);

    public DevToDevGetterOptionalStringCallback(Object pointer) {
        this.pointer = pointer;
    }

    @Override
    public void onResult(Object result) {
        if (result instanceof String) {
            CallbackHandler(pointer, true, (String)result);
        } else {
            CallbackHandler(pointer, false, "");
        }
    }
}
// End DevToDev gameActivityClassAdditions
        </insert>
    </gameActivityClassAdditions>

</root>